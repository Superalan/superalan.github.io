<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title><![CDATA[Kubernetes安全]]></title>
    <url>%2F2017%2F03%2F05%2Fkubernetes-secure%2F</url>
    <content type="text"><![CDATA[安全机制kube-apiserver是整个kubernetes集群的核心，无论是kubectl还是通过api管理集群，最终都会落到与kube-apiserver的交互，apiserver是集群管理命令的入口。kube-apiserver同时监听两个端口：insecure-port和secure-port。通过insecure-port进入apiserver的流量可以有控制整个集群的全部权限，这个端口一般是为了集群bootstrap或集群开发调试使用的；而通过secure-port的流量将经过k8s的安全机制的重重考验。官方文档建议：集群外部流量都应该走secure port。insecure-port可通过firewall rule使外部流量unreachable。 下面这幅图说明了请求apiserver的过程： 这其中包含三个环节，认证、授权、admission control。 认证认证环节包括两部分，一部分是外部访问集群的安全控制，一部分是集群访问节点的安全控制。 -&gt;Master: 需要在apiserver中配置根证书及服务端证书 Master-&gt;node: 后者暂不考虑。 在认证步骤中主要是对HTTP请求的header/客户端证书做验证。认证模块包括： 客户端证书 密码 简单token 启动token JWT token 如果认证失败，HTTP请求会被拒绝并返回401返回码；反之，系统会根据username内容，明确请求用户身份。但系统不会将用户信息存储。 授权认证身份之后，系统会对用户进行授权操作，从而使用户具备具体的操作权限。在系统中可以对用户进行操作授权规则定义，一个简单的规则如下： 1234567891011// 定义用户bob具有projectCaribou空间的pod只读权限&#123; &quot;apiVersion&quot;: &quot;abac.authorization.kubernetes.io/v1beta1&quot;, &quot;kind&quot;: &quot;Policy&quot;, &quot;spec&quot;: &#123; &quot;user&quot;: &quot;bob&quot;, &quot;namespace&quot;: &quot;projectCaribou&quot;, &quot;resource&quot;: &quot;pods&quot;, &quot;readonly&quot;: true &#125;&#125; 系统支持多种授权模块，例如ABAC、RBAC以及webhook等。系统管理员在集群构建的时候，需要在apiserver中指定需要使用的授权模块。如果定义多个授权模块，其中一个授权模块通过，系统则认为授权通过。 准入除了授权控制，admission control在请求方面做了进一步准入控制。与授权模块的区别在于，admission control可以访问到系统中的object，对object的创建、删除、更新等操作进行控制。 举例一个简单的场景，如果系统管理员定义了一个namespace最多使用20G内存（quota），当前这个空间下已经使用了18G。此时一个具有操作权限的用户创建了一个服务，配置的quota是4G。这个请求会正确通过认证和授权控制，因为这两个步骤无法对系统中的对象进行访问和操作限制。这个动作的限制，就是由admission控制的。 除了对请求操作有拒绝策略规则之外，admission control还可以给请求增加默认字段。 AlwaysAdmit：允许所有请求通过 AlwaysPullImages：在启动容器之前总是去下载镜像，相当于每当容器启动前做一次用于是否有权使用该容器镜像的检查 AlwaysDeny：禁止所有请求通过，用于测试 DenyEscalatingExec：拒绝exec和attach命令到有升级特权的Pod的终端用户访问。如果集中包含升级特权的容器，而要限制终端用户在这些容器中执行命令的能力，推荐使用此插件 ImagePolicyWebhook ServiceAccount：这个插件实现了serviceAccounts等等自动化，如果使用ServiceAccount对象，强烈推荐使用这个插件 SecurityContextDeny：将Pod定义中定义了的SecurityContext选项全部失效。SecurityContext包含在容器中定义了操作系统级别的安全选型如fsGroup，selinux等选项 ResourceQuota：用于namespace上的配额管理，它会观察进入的请求，确保在namespace上的配额不超标。推荐将这个插件放到准入控制器列表的最后一个。ResourceQuota准入控制器既可以限制某个namespace中创建资源的数量，又可以限制某个namespace中被Pod请求的资源总量。ResourceQuota准入控制器和ResourceQuota资源对象一起可以实现资源配额管理。 LimitRanger：用于Pod和容器上的配额管理，它会观察进入的请求，确保Pod和容器上的配额不会超标。准入控制器LimitRanger和资源对象LimitRange一起实现资源限制管理 NamespaceLifecycle：当一个请求是在一个不存在的namespace下创建资源对象时，该请求会被拒绝。当删除一个namespace时，将会删除该namespace下的所有资源对象 DefaultStorageClass DefaultTolerationSeconds PodSecurityPolicy 当Kubernetes版本&gt;=1.4.0，官方建议使用这些插件： 1--admission-control=NamespaceLifecycle,LimitRanger,ServiceAccount,DefaultStorageClass,ResourceQuota 与授权不同的是， 准入模块中的任何一个模块返回失败，请求会被拒绝。 端口 Localhost port: 12345678- is intended for testing and bootstrap, and for other components of the master node (scheduler, controller-manager) to talk to the API- no TLS- default is port 8080, change with `--insecure-port` flag.- defaults IP is localhost, change with `--insecure-bind-address` flag.- request **bypasses** authentication and authorization modules.- request handled by admission control module(s).- protected by need to have host access Secure port: 1234567- use whenever possible- uses TLS. Set cert with `--tls-cert-file` and key with `--tls-private-key-file` flag.- default is port 6443, change with `--secure-port` flag.- default IP is first non-localhost network interface, change with `--bind-address` flag.- request handled by authentication and authorization modules.- request handled by admission control module(s).- authentication and authorisation modules run. 参考http://tonybai.com/2016/11/25/the-security-settings-for-kubernetes-cluster/]]></content>
      <categories>
        <category>kubernetes</category>
      </categories>
      <tags>
        <tag>kubernetes</tag>
        <tag>技术</tag>
      </tags>
  </entry>
</search>